++++2020-6-1++++1.面向对象的思想
    面向对象和面向过程
    1.面向过程 ：面向过程的思想强调的是解决问题的步骤，每个步骤紧密相连，其中一个步骤出错都要从头再来。
    编程语言代表  有 c语言
       在家自己吃饭
          1.买菜
	  2.洗菜
	  3.切菜
	  4.炒菜
	  5.蒸饭
	  6.吃饭
	  7.洗碗
    2.面向对象：面向对象思想强调的是解决问题的对象，解决不同的问题使用不同的对象，如果对象出现了错误，
      只需要更换对象。编程语言的代表  java语言
       在学校吃饭  在饭店吃饭
         1.买菜----买菜工（对象）
	 2.洗菜----帮厨（对象）
	 3.切菜----帮厨（对象）
	 4.炒菜----厨师（对象）
	 5.蒸饭----帮厨（对象）
	 6.吃饭----你（对象）
	 7.洗碗----洗碗工（对象）

    3.我们在使用面向对象思想去解决问题的时候虽然忽略了过程，但是这个过程依然真实的存在
    。所以我们说      
    ***面向对象是基于面向过程的。
    4.面向对象的思想更接近于我们日常的思维，更接近于日常的思考习惯，使问题简单化。
 ***** 5.面向对象的特征  封装  继承  多态  抽象

2.什么是类？
   1）类  对于具有相同特性事物的抽象描述
   2）在生活中我们通过俩个方面来描述一类事物
       静态特性   即属性  （例如 人类  姓名   性别  身高  体重）
       动态特性   即功能  （例如 人类   吃饭  睡觉   玩  敲代码）  
   3）在java中描述一个类  和生活中一样 也是通过属性和功能  属性就是成员变量  功能就是成员方法  

3.什么是对象
  对象 ： 符合类的特性的具体实体  对类描述的属性 有具体的值  能够完成类描述的功能。
           在java中对象是通过类得到的
4.java中怎么创建类
     java中的类由成员变量和成员方法组成
     类class=成员变量+成员方法
    public class Person {

	//定义我们的成员变量
	public String name; //姓名
	
	public int age;//年龄
	
	
	//定义成员的功能  或者叫方法
	public void sleep(){
		System.out.println("正在睡");
	}
}

5.java对象怎么创建 怎么使用  对象和类的关系
   1）创建对象的过程  也称之为实例化对象  
   在程序里我们是先有类之后才能实例化对象
   实例化需要关键字  new
  //实例化对象
  类名  对象名  =new 类名（）;
  我们只能实例化定义过的类
  2）对象的使用
     1.使用对象的属性  存储数据
      对象.属性=值
      1.1只能使用类中定义的属性
      1.2给属性赋值时  必须与类中的属性类型相同
      1.3调用 成员方法  对象.方法名（参数）
      
  3）1.每个类中都可以有多个对象
     2.多个对象之间是相互独立的多个对象之间的属性和方法相互没有影响

6.封装  
   1）封装的步骤
      1.类的封装  java的实体类
         1）属性私有化  private
	 2)公开访问的方法  set赋值（有参数  无返回值） get取值 （无参数  有返回值）
         3）添加有参数和无参数的构造方法
  
   2）封装后的使用
      封装类后的使用
       封装后给属性赋值
         实例化对象了 
	 Student s =new Student();
        s.setName("张三")   
       封装后对象取值
       s.getName();
    1）封装之后不能通过对象.属性来赋值和取值了
    2）封装之后赋值时需要使用对象的set方法
    3）封装之后取值需要使用对象的get方法
7.this关键字
    用来指代当前对象
    一般用来区分 成员变量  和参数中的局部变量
    this.变量都是成员变量  this.name=name;
8.构造方法
   特性： 1）构造方法  是在实例化对象的调用
          2）构造方法的方法名一定要与类名一致
	  3）构造方法没有返回值类型 连void也没有
    通常情况下我们封装一个类时都会加上有参数和无参数的构造方法
    有参数的构造方法一般用来给对象属性赋值

如果一个类中没有显示构造方法（你也没有写） 系统会为它添加一个无参数的构造方法
如果类中有显示的构造方法了（你写了一个构造方法） 系统将不会提供构造方法


构造方法和普通方法的区别
   构造方法的方法名一定要与类名一致
   普通方法随意命名符合命名规则就可以
   构造方法是没有返回值类型
   普通方法必须要加返回值类型
   构造方法是在实例化对象的时候才会调用
   普通方法是在对象.方法名的时候就可以调用
   构造方法只能在封装类中
   普通方法可以在任意的地方写

9.变量的生命周期和作用域
   什么是成员变量  ：定义在方法外 类中
   什么是局部变量： 定义在参数列表中  或者方法体内部

  成员变量都是有默认值的
  局部变量是没有默认值得
  1. 变量的作用域 ：变量在程序中生效的区域
     1）成员变量的作用域 在整个类中 以及类的所有方法
     2）局部变量的作用域 在他所定义的方法的方法体内生效
     3）for中的初始变量它的作用域在循环体内

     总结  变量的作用域  都是包裹在它的{}  方法的参数和for循环的初始值  作用域是在后边的{}内的

  2.变量的生命周期
      就是变量在程序运行期间生效的时间
  
++++2020-6-2++++10.什么是继承？ 
    继承跟我们现实生活中的继承很类似
    继承的关键字  extends
     被继承的类叫  父类（超类或者基类）
     继承的类叫      子类
  

   继承的语法
     public class 子类 extends 父类  
  继承的特性
    1.extends是写在子类中的
    2.继承只能是一个类继承一个类 但是一个父类可以有多个子类  单继承 不可能继承多个类
    3.实例化子类对象时  会调用父类的构造方法
    4.继承关系中子类不能调用父类的私有化的属性和方法
    5.子类可以继承父类的属性和方法  不过属性和方法不能是私有的
  继承的好处 
   继承就是把一些公共的代码提取到父类中  减少代码重复

11.super关键字的作用？
    super :用在子类里  指代父类的对象
     super() //调用父类的构造方法   
            并且super调用父类的构造方法必须放在第一行  
     super关键字还可以调用父类的普通方法  super.方法名
       super.属性
     super也是调用不到父类的私有化的属性和方法的

12.什么是重写？ override和overload 重写和重载
     1.重写发生在继承关系
     2.在子类中重写父类的方法
     3.要求子类中的方法的方法名  以及参数列表  返回值类型 必须与父类的完全一致
     4.子类不能重写父类的私有的方法和静态的 static
     5.子类继承父类是不能比父类抛出更大的异常
     6.子类重写父类的方法时 访问权限不能小于父类
     7.当父类的方法无法满足子类需求时  我们通常在子类里重写父类的方法

13.重写和重载有什么区别？
    重载
      1.发生在同一个类中的
      2.方法名相同参数列表不同（参数的个数 顺序  类型）
      3.与修饰符和返回值无关
    重写
      1.重写发生在继承关系中  俩个类
      2.在子类中重写父类的方法
      3.子类的方法名和参数列表  返回值类型 必须与父类的完全一致
      4.子类不能重写父类的私有的方法和静态的static
      5.子类继承父类不能比父类抛出更大的异常
      6.子类重写父类的方法是  访问权限不能小于父类
      7.当父类的方法无法满足子类需求时  我们通常在子类中重写父类的方法
  *** 重写和重载的区别  或者  override和overload的区别？
    1.重载发生在同一类中，重写发生在父子类继承关系中
    2.重写要求重写非私有非静态的方法 ,重载没有要求
    3.重载与返回值无关  重写要求返回值必须相同
    4.重载要求参数类型顺序个数至少有一个不同，重写要求参数必须相同
    5.重写要求子类的访问权限不得小于父类 但是重载没有要求
    6.重写要求子类不得抛出比父类更多更大的异常，重载还是没要求


14.访问权限修饰符

                当前类           当前包       子类（同包）  子类不同包   任何地方
 private         可以            不可以         不可以        不可以      不可以
 default         可以             可以           可以          不可以     不可以
 protected       可以             可以           可以          可以       不可以
 public          可以             可以           可以          可以       可以

   访问权限从小到大
   private(私有的) < default(默认的)<protected(受保护的)<public (公共的)

15.抽象  抽象类 和抽象方法
   abstract修饰类叫做 抽象类
     1.抽象类不能被实例化
     2.想要使用抽象类只能通过继承的方式
     3.抽象类中可以有抽象方法，也可以有普通方法
  abstract 修饰方法  抽象方法
     1.抽象方法没有方法体  没有{}
     2.如果一个类继承抽象类必须重写抽象类中的抽象方法 除非子类也是抽象类  就不用重写抽象方法 

抽象的好处
    就是子类继承父类后父类的方法的方法体已经没有用了  
    抽象就是把父类中的方法体去掉  子类继承后重写父类方法  
    方法体就可以任意定义了  减少了父类的代码量
   ** 1）抽象类中一定有抽象方法  false
   ** 2）有抽象方法的类一定是抽象类  true

16.static和final的
    static 静态的   
         static修饰的属性  静态属性
	 static修饰的方法  静态方法
	 静态的属性和方法  可以通过类名.属性/类名.方法名直接访问（不需要实例化对象）
     static修饰的属性可以认为是类的。它不跟其他属性一样  独立于对象中的
 final  最终的
     修饰变量  final修饰的变量是常量  必须给他一个初始值
     修饰方法   final修饰的方法是最终方法  不能被重写  但是可以被重载
     修饰的类  final修饰的类  叫做最终类  不能被继承的
   工具类中定义 常量  public  final static  数据类型 常量名（全部大写字母） =常量的值 


17.接口
  接口的关键字 interface (特殊的抽象类)
    1.接口所有的方法都是抽象方法
    2.接口中的所有的成员变量  都是常量
    3.接口不能被实例化
    4.接口和类 之间是实现关系  通过class 实现 implements 接口名  ，实现接口必须重写接口中的抽象方法  除非你是一个抽象类  抽象类就不用重写那个抽象方法了
    5.接口和接口之间  是继承关系
    6.一个类可以实现多个接口 多个接口之间使用逗号隔开  但是只能继承一个类
   先继承后实现 单继承 多实现
    单继承  意思是每一个类只有一个父类
    多实现  意思是每一个类可以实现多个接口

+++2020-6-3+++++18.多态
   什么是多态？  多种状态
    1.重写和重载也是多态的表现。
    2.用子类给父类赋值父类对象指向子类
    3.用实现类给接口赋值用接口的对象指向实现类对象
  
   1） 向上类型转化（自动/隐式类型转化）  向上转型  是小类型转化成大类型   不存在风险  即子类型对象也是父类型  
    向下类型转化  向下转型（强制类型转化） 大类型转小类型  存在一定的风险的  多态实例化后 都可以向上类型转化 但是转化后 子类型对象  之间 相互转化就有有一定的风险
   2）instanceof 
      1)它的作用就是测试 它左边的对象是否是他右边的类的实例
      2)在java中  引用变量只能调用它编译时类型的方法而不能调用它运行时的方法即使他实际所引用的对象确实包括方法
        如果需要让这个引用变量来调用它运行时类型的方法，就必须使用强制类型转换把他转成运行时的类型。在强制转化的时候
	最有可能出现类型转化异常ClassCastException 规避这个异常利用 instanceof 关键字来判断是否是本类的对象
	如果成立在进行强制类型转化。
   3）匿名对象
      3.1 匿名对象是指创建对象只有创建对象的语句  却没有把对象的地址的值赋给某个变量。
      3.2匿名对象的特点  创建匿名对象直接使用  没有变量名
      3.3匿名对象的使用  new 对象().方法名  匿名对象只能使用一次 想要再次调用对象的其他方法时需要重新new
      3.4匿名对象可以作为方法接收的参数，方法的返回值使用

了解  内部类
       1.什么是内部类
         将类写在其他类中，可以写在其他类的成员位置和局部位置 这时写在其他类内部的类就叫做内部类  其他类叫做外部类
       2.什么时候使用
        在描述事物时 若一个事物内部还包含其他的事物  ，就需要使用内部类
	 比如说  在描述汽车时汽车中还包含发动机  这样就可以使用内部类
          class  汽车{ 外部类
	     class 发动机{ 内部类
	     
	     }
	    
	   }
       3.内部类分类
         分为俩种  1成员内部类   2局部内部类
         我们在定义内部类时 就是一个定义正常类的过程，同样包括各种修饰符，继承与实现 在内部类中可以直接访问外部类的所有的成员。
          1.1.成员内部类
	    class 外部类{
	      修饰符 class 内部类{
	      
	      }
	    }
          1.2.访问方式
	   外部类名.内部类名 变量名=new 外部类名().new 内部类名();
         

	  2.1局部内部类
	    定义在外部类中的局部位置与访问方法的局部变量相似可以通过调用方法进行访问
          
	  class 外部类{
	    修饰符  返回值类型  方法名(参数){
	       class 内部类{
	      	}
	      
	    }
	  
	  }
         2.2访问方式
	    在外部类方法中 创建内部类对象进访问

         内部类的实际使用  匿名内部类
	 匿名内部类
	    1.临时定义某一指定类型的子类
	    2.定义后即刻创建刚刚定义的这个子类对象
         匿名内部类的作用和格式
	  作用：匿名内部类时创建某个类型子类对象的快捷方式
          格式
	       new 父类或接口(){
			进行方法的重写
	       };
     
          使用匿名对象的方式  将定义的子类 与创建子类对象俩个步骤有用一个格式完成
	  public  abstract class Person(){
	  public static void main(String[] args){
		   new Person(){
			  public void eat(){
				  System.out.println("我吃了");
			  }
		  }.eat();
		  }
	  }
    内部类能不能是抽象类或者接口呢？
     可以  因为我的内部类跟普通类没什么区别




19.Object 类
   Object类  超级类  所有的类直接或间接的都继承了Object类
    一个类不显示 继承其他的类 默认都继承Object类
       class  A{} A的父类就是Object类
       class  B extends A  B的父类是A
       class  C extends B  C的父类是B
    Object中常用的方法
      1.toString() 方法
      1）在Object 中返回的是类名+@+hashcode   getClass().getName() + "@" + Integer.toHexString(hashCode());
      2)我们通常重写toString() 就是为了实现 返回对象具体信息的功能      
     2.equals() 比较对象是否相等
       == 去比较的时候
          1）比较基本数据类型  比较的是 ==俩边的值是否相等
	  2）比较对象时  比较的是内存地址是否相等  每 new 对象就意味着在jvm开辟一块内存  对象的地址永远不会相等
       如果我们想要比较对象是否相等可以比较对象中的值是否相等
       我们就可以重写equals();
       String 类就重写了equals方法  用来比较值是否相等

    了解 3.finalize() 该方法 在对象将被jvm回收的会调用
       GC. 垃圾回收  当jvm内存紧张的时候 会有垃圾回收机制回收没有用的对象以此减小内存的开销
       什么时候一个对象会被GC回收 无法确定一个对象会被GC回收


+++++2020-6-4+++++20.Exception(异常)
   API文档是什么？
     开发java语言的程序员为了后边的人更加容易的去使用java语言编写的说明书。
     就跟你买了手机  人家给你的说明书是一样的。

  1.  异常  java.lang.Throwable
      1.什么是异常？ (俗称 错误)
       java中程序运行中出现的错误就叫异常  程序执行前报出的错误叫编译异常（编译错误）
       异常类的作用就是当程序发生错误的时候提示异常的具体信息
  2.异常的结构    
   Throwable   这是java中所有异常类的超类所有异常类的父类
   Error (错误)  当程序运行期间遇到了不可恢复的错误必须重新运行程序。
                 常见的OutOfMemoryError  (内存溢出)或者叫oom  叫做内存溢出错误               
                了解：  jvm(虚拟机  优化)
		  真正的工作过程中会不会jvm优化  很少会让你做jvm优化但是面试喜欢问


   Exception(异常)
          一般性异常 (可控异常)
	       可控异常：是在程序运行期间  可能会发生异常需要程序员显示的处理异常
	       叫做可控/受控  异常
	       如果程序员不处理这个异常  则编译报错
	       比如说   
	             IOException  io流异常
	             FileNotFoundException  文件未找到异常
	             EOFException  读写文件异常
           RuntimeException(运行时异常)
	    运行的时候可能会发生的异常  但是不需要程序员在写代码的时候显示的处理。就是在运行的时候出现。
                 IndexOutOfBoundsException  索引（下标）越界异常
	             ArrayIndexOutOfBoundsException  数组下标越界
	             ArithmeticException   数学计算异常  
	             ***NullPointerException  空指针异常
	             ClassNotFoundException  类文件未找到异常       
	             NumberFormatException  数字格式转化异常
	             StringIndexOutOfBoundException  字符串下标越界异常

  3.异常的分类
     1.异常类对象的使用 ,使用throw抛出异常对象
     2.自定义异常类  我们只要继承了任意异常类  这个类都是异常  
       通常我们都是自己来定义一些业务异常
     throw是在方法的内部抛出异常
  4.异常的处理
      1.捕捉异常  try  catch  finally
         try  里面放的是可能出现异常的代码块
	 catch 捕捉异常  catch后面的小括号规定要捕捉什么样的异常
	       catch可以有多个
	       catch里的语句块异常的时候可以能被捕捉到
         finally  不管你异常不异常  最终都会执行  
      2.声明  throws  抛出异常  用在参数列表和方法体之间
              抛出的异常谁来调用谁来处理  
	      如果你调用了一个throws 异常类的方法  那你的程序里也需要处理异常
              在工作过程中一般都会声明Exception这个所有异常类的父类
 *** 使用注意和常见的面试问题
    1.throw 和throws有什么区别？
    throw  用来抛出异常对象  用在方法的内部
    throws 用来声明异常 用在参数列表与方法体之间  表示抛出异常
            调用了声明异常的方法需要处理异常
    2.final  finally finalize 这三者有什么区别  常见面试问题之一
       final修饰的变量都是常量 值不能被更改  在定义的时候需要初始化赋值
       final修饰的方法  不能被重写
       Final 修饰的类不能被继承
       finally 是与try catch连用的语句 finally里的代码一定会被执行
       finalize()  是来自object类的一个方法 当对象要被GC垃圾回收时 会调用该对象的
       finalize()方法
    3.try catch finally 必须同时出现吗？
       有try可以没有catch语句 但是后边得有finally
       finally可以直接跟在try语句后边
       有catch必须有try

21.java常用类
      ***记住公司中比较字符串一定要用equals 千万不要用== 如果你用==比较字符串就离开除不远了
       一.1.String  java.lang
       1.String是什么？
         String 是存储字符串  String的底层是通过char类型的数组实现的
         字符串是常量
       2.String 字符串的创建方式有俩种
         String s ="字符串的值";  这种定义方式指的是定义了一个字符串常量  可以用==比较也可以用equals比较
	 String s =new String("字符串的值"); 这种方式定义的是一个string的对象  对象之间比较只能通过equals比较 用==比较的是内存地址
	     
         String s =new String("字符串的值"); 创建了几个对象？2个
           这俩个对象分别是   s="abc" 常量池中的值的对象  new String()在堆中又开辟了一块空间
       3.String 有什么特点
          1）String类型是不可变的类型   在使用String时尽量不使用+拼接
          2）String 类是被final修饰的所以不能被继承
       4.String的常用方法  讲常用方法的目的是为了以后工作中操作字符串
         charAt()  根据下标返回指定的字符
         concat() 将指定字符串连接到此字符串的结尾。类似+ 在工作中真的需要拼接字符串那也是用+
         indexOf 返回字符第一次出现的下标 如果有俩个参数 第二参数指从指定下标开始搜索 如果没找到返回-1
	 *lastIndexOf() 字符最后一次出现的下标 反向搜索  第二参数指从指定下标开始搜索 如果没找到返回-1
         ***length() 返回字符串的长度
         replace() 替换字符串 把目标字符串替换成自己的字符串
          ***split() 根据字符串中的字符把字符串分割成一个数组
         ***substring(startIndex,endIndex) 截取字符串  里面有俩个参数 
		//startIndex指 开始截取的下标  endIndex 指结束截取的下标
		  //但是结束下标是截取不到的  只能截取到结束下标-1的位置
		//截取包头不包尾    包含开始不包含结束
		//如果substring中只有一个参数  就是从参数位置截取到结束
         toLowerCase() 把所有的大写转化成小写
	 toUpperCase() 把所有的小写转化成大写
        **** trim() 去掉开头和结尾的空格或者空白
	 valueOf(参数) 参数指的是基本数据类型  这个方法的作用是把基本数据类型转化成字符串

    StringBuffer 
      字符串缓冲区 是可变的字符串类型连接效率要高于String 线程安全
      常用的拼接方法是 append()拼接可以无限制拼接  只要你内存足够
    StringBuilder
    字符串缓冲区  是可变的字符串类型 连接效率要高于StringBuffer 但是线程不安全
      StringBuffer和 StringBulider不能直接赋值
      只能通过new对象的形式赋值
     拼接速度 String<StringBuffer<StringBuilder 
     string  通过+拼接
   StringBuffer和StringBuilder 都是通过append拼接
      
       
      String StringBuffer和StringBuilder 这三者有什么区别
      String 是不可变的字符串类型  连接效率低
     StringBuffer 是可变的字符串类型  连接效率高于String  线程安全
     StringBuilder 是可变的字符串类型  效率高于StringBuffer  线程不安全
    ** 了解   线程安全和不安全要在多线程环境下去说
       
+++2020-6-5+++++ java常用类     
     二. Random  java.util.Random
         随机数类  伪随机数
         可以通过random对象创建随机数
        //创建了一个随机数的对象
	Random r =new Random();
       如果nextInt 中有参数  返回一个0到指定值得随机数,但是不包括指定值
	int nextInt = r.nextInt();
       //生成4-9的随机数
	int a = r.nextInt(6)+4;
	//取  3-15的随机数  包括15
	int a1 = r.nextInt(13)+3;

     三.  Date  java.util.Date  （java.sql.Date 是util.Date的子类所以我们一般使用util.Date）
        时间类型
       SimpleDateFormat  获得格式化日期类型的对象
        语法
	     SimpleDateFormat sdf =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	     yyyy 指代年
	     mm 指代月
	     dd指代日
	     HH指代 小时
	     mm指代分钟
	     ss指代秒
	format(参数) 参数为时间类型  他可以把时间类型转化为字符串类型
	parse(参数)  参数为字符串类型  他可以把字符串类型转化为时间类型
	             因为parse方法中声明了异常所以我们在调用它的时候需要处理异常


     四. Math 数学对象
         //PI  圆周率  常量  3.141592653589793
	System.out.println(Math.PI);
	//静态的方法
	//abs() 绝对值  负数的绝对值是正数  正数的绝对值是他本身  0的绝对值是0
	System.out.println(Math.abs(-10));//10
	System.out.println(Math.abs(10));//10
	System.out.println(Math.abs(0));//0
	//ceil() 向上取整
	System.out.println(Math.ceil(10.00001));//11.0
	System.out.println(Math.ceil(-10.999999));//-10.0
	//floor() 向下取整
	System.out.println(Math.floor(10.999999));//10.0
	System.out.println(Math.floor(-10.999999));//-11.0
	//round() 四舍五入
	System.out.println(Math.round(10.562));//11.0
	System.out.println(Math.round(-10.562));//-11.0
	System.out.println(Math.round(10.462));//10
	System.out.println(Math.round(-10.462));//-10
	//random() 随机数  0-1  包0不包1
	System.out.println(Math.random());
	//取  1-10 的随机数  包括10
	System.out.println(Math.floor(Math.random()*10+1));
  五.DecimalFormat  
    DecimalFormat是NumberFormat的一个子类 
                用于格式化十进制数字
    	//DecimalFormat   
	//取第一位正数
	System.out.println(new DecimalFormat("0").format(pi));//3
	//取第一位整数和俩位小数
	System.out.println(new DecimalFormat("0.00").format(pi));//3.14
	//取两位整数和三位小数  整数不足的部分用0补齐
	System.out.println(new DecimalFormat("00.000").format(pi));//03.142
        //取出所有整数部分
	System.out.println(new DecimalFormat("#").format(pi));//3
        //以百分比的形式并取出俩位小数
	System.out.println(new DecimalFormat("#.##%").format(pi));//314.16%
        
	long c=299798785;
	//显示为科学计数法  并取五位小数
	System.out.println(new DecimalFormat("#.#####E0").format(c));//2.99799E8
	//显示为科学计数法  并取四位小数
	System.out.println(new DecimalFormat("#.####E0").format(c));//2.99799E8
        //显示为俩位整数的科学计数法  并取思维小数
	System.out.println(new DecimalFormat("00.####E0").format(c));//29.9799E7
       //每三位以逗号进行分隔
	System.out.println(new DecimalFormat(",###").format(c));//29.9799E7
       //将格式嵌入文本
	System.out.println(new DecimalFormat("大家以后的薪资就是,###元").format(c));//29.9799E7

     六. Scanner  java.util.Scanner
        从控制台输入值给程序中的变量
	1.导入工具包  import java.util.Scanner
        2.实例化scanner对象  Scanner 对象名 =new Scanner(system.in)
	3.需要变量来存储你输入的值
	   变量 =Scanner.nextInt()  获得int类型的值
           变量 =Scanner.next()  获得string类型的值
	   变量 =Scanner.nextBoolean()  获得boolean类型的值

     七.Arrays 类 java.util包的  主要操作数组的各种方法 java.util.Arrays
          Arrays里的方法也全部都是静态的方法
          sort() 排序 对数组按照升序排序 从小到大
	  sort(参数1，参数2，参数3)  对数组的指定范围进行排序  排序范围是参数2到参数3-1的范围
	  fill() 可以给数组填充相同的值
	  toString 把数组转化成字符串
          deepToString() 返回多维数组的字符串形式
	  asList() 把数组转化为list集合
       *** 面试常问的一个问题  
	了解：  
	 数组如何转化为集合   Arrays.asList();
	 集合如何转化为数组   List.toArray();

      八.基本数据类型的封装类
            byte-------------------Byte
	    short-----------------Short
	    int-------------------Integer
	    long------------------Long
	    double----------------Double
	    float-----------------Float
	    char-----------------Character
	    boolean--------------Boolean
           xxxValue()  这个方法中  xxx表示的具体的类型
	   比如  intValue()  floatValue()
	   此方法的作用是把封装的数据类型转化为基本数据类型
	   parseXXX()  XXX代表的是数据类型
	   这个方法的作用将字符串抓化成具体的数字格式
	   valueOf() 把字符串转化成具体的封装类的数据类型
       装箱和拆箱
         装箱：把基本数据类型用他们相应的封装数据类型包装起来使其具有对象的性质。int包装成Integer float包装成Float
	 拆箱：和装箱相反  将引用类型的对象简化成值类型的数据
	//装箱
	Integer a =100; //这是自动装箱 编译器调用的是 static Integer valueOf(int i)
	//拆箱
	int b =new Integer(100);//这是自动拆箱
	   
  22.集合
       1.什么是集合？
          集合你可以想象成是一个容器。
	  集合是基于Object类型的可变数组实现的 存放的数据类型可以不是同一种
       2.结合的大体结构  collection是java.util的包
        collection 是集合的顶层接口 它的下边还有俩个常用的接口
	  分别是
	  List 是集合中常用的一个接口
	       也有好多实现类
	      常用的实现类： ArrayList  基于数组的list
	       LinkedList  基于链表的list
	       Vector   线程安全的list(不常用)
	  Set 
             也有好多实现类
             常用的实现类：
	     HashSet
	     TreeSet

       3.获得集合对象  不能直接new 因为collection是一个接口所以只能通过实现类赋值
       4.add() 是向集合中添加元素
       5.size() 查看集合的长度  字符串查看长度 length() 方法   数组查看长度 length 属性  集合查看长度 size()方法
       6.remove()移除集合中的元素
       7.removeAll()移除所有的元素
       8.clear()清除集合中的所有元素
======2020-6-8+++++     3. 如何迭代遍历集合呢？ 有迭代器  Iterator
         如何获得这个迭代器对象呢  需要循环的集合.iterator();就可以获得迭代器对象了
          1.hasNext()  查看迭代器中是否还有迭代的元素
	  2.next() 获得迭代的元素  返回值是一个Object类型的数据
	  while(迭代器.hasNext()){
	      Object obj=迭代器.next();
	  }

23.List接口中的实现类使用  在公司中查询永远多于增删改
****ArrayList  基于数组的
    List list=new ArrayList();这也是多态的使用
    List也是接口  同样不能实例化  只能通过实现类来赋值
    list 有下标  可以通过下标操作元素  集合中的元素是有顺序的
    ArrayList中的remove方法是通过下标来移除元素的
 LinkedList  基于链表的 它也是list接口的实现类所以它里面的方法与ArrayList
    的方法差不多所以不写了。

 ArrayList 和LinkedList 区别
   
ArrayList  使用的是数组的方式存储数据  查询效率高  但是插入和删除的效率低
LinkedList  使用的是链表存储的数据  查询效率低  但是插入和删除的效率高
ArrayList和LinkedList 线程都不安全  在多线程环境下
vector 线程安全的list  操作与list都一样
24.set接口中实现类的使用
  因为set和list都是collection的接口所以在操作方面没有什么区别
   set 因为也是接口所以也不能实例化  需要实现类HashSet和TreeSet给他赋值
   list有的方法set一样拥有
    set中这个元素没有下标的所以只能通过迭代器循环遍历

  HashSet 也是set的一个实现类与set接口的操作基本一致
  TreeSet 也是set的一个实现类与set接口的操作基本一致
  TreeSet  是存储二叉树方式所以TreeSet可以自动排序
25.set和list有什么区别  
   有序无序 是指你在添加数据时的顺序和输出时的顺序  
  list 是有序的  有下标  list中的对象可以重复
  set 无序 无下标  set中的对象不可以重复
  这俩个集合都是可以存放空值的

26.Map 接口类
map中有俩个常用的实现类  HashMap 和HashTable
    1.map和collection有什么区别？
      collection  单列集合
      map是一个双列集合
    2.map使用
       map又叫映射
         向映射集合中添加映射  是使用 put(key,value)
               key 是键  必须唯一
	       value是值  不用唯一
    3.map中的常用的方法
       put(key,value)  添加映射关系
       size() 查看映射关系的个数
       remove(key) 通过key 移除映射关系
       get(key) 通过key获得对应的value
    4.循环遍历这个map映射
      keySet() 获得所有的key的set集合
       根据keySet获得iterator迭代器
       在循环过程中循环的实际上是key
       获得值是通过  映射名.get(key) 来获得每一个值
       //entrySet() 遍历集合
     //把key和value放到一个set集合中
     //获得set集合中的每一个entry数组或者是每一个映射关系
	Map.Entry en=(Entry) iterator.next();

HashMap 和HashTable有什么区别
   hashMap和hashTable都是map接口的实现类
   所以 hashMap和hashTable 都实现了map提供的方法
   HashTable的键值对都不允许为空  如果为空会报空指针异常 效率低 适合多线程  线程安全
   HashMap 的key和value都允许为空  效率高 适合单线程 线程不安全
27.泛型
   泛型就是指 规定集合和映射和迭代器中存放的数据类型  免去了转化的麻烦
   泛型中不能放基本数据类型  只能放对象
	//间括号中放的就是泛型 
      List<String> list=new ArrayList<String>();

++++++++++2020-6-9++++++++28.IO流
    IO流的作用  数据传输  通俗点讲就是 对文件的写入和读取
    I 代表  输入Input 的意思  写入
    O 代表  输出Output的意思  写出
     1.从操作文件类型  和读写单位的不同可以分为字节流和字符流
         字节流  操作以字节为单位
	         它 是用来读取  图片   视频 音乐等类型的文件
	 字符流 以字符为单位  一个中文字符至少占用俩个字节
                    用来读写字符型的数据文件  txt
     2.从数据流的角度上来说  可以分为输入流和输出流
        输入流  是从硬件设备上  流向内存  也可以理解为向程序中读取
	                    读取 input
	   内存（程序）--------------->  硬件存储设备  （硬盘）
        输出流  是从内存流向硬件设备  可以理解为  从程序向外写入
	                            写入 output
           硬件存储设备（硬盘）<----------------内存(程序)
     3.应用场景
       主要用于文件的上传与下载  例如 QQ空间上传照片  微信上传头像 等
     4.javaIO流的基础流
      字节输入流  InputStream
      字节输出流  OutPutStream
      字符输入流  Reader
      字符输出流  Writer
  InputStream 
 *  从硬盘中读取数据到我的程序中
 *  我们要读取test.txt文件的内容到程序中并且在控制台打印
 *   1.输入字节流  InputStream
 *   2.打印到控制台
 *  使用步骤
 *    1.实例化对象   InputStream是抽象类不能被实例化  所以实例化他的子类 参数就是文件的路径 
 *    2.读取文件的内容
 *    3.关闭流
 *    4.处理异常
 OutPutStream
 * 字节输出流
 *  把字符串的内容写入到  yintechi.text 
 *   把程序或者内存中的-------->硬盘（文件）
 *   需要用到 outputStream
 *   1.实例化对象
 *   2.往外边写
 *   3.关闭流
 *   4.处理异常
Reader  
  参考上边的InputStream就ok了
Writer
  参考上边的OutPutStream就ok了

29.JavaIO的封装流 (缓冲流) File类
    BufferedInputStream  
    BufferedOutputStream
    BufferedReader  br.readLine()  每次读取一行  读到文件结尾时返回空null
    BufferedWriter  
    flush()  刷新流防止缓存
30.file类
   file可以创建文件 或者文件夹
    mkdir()创建单个文件夹
    mkdirs()创建多层文件夹
    createNewFile()创建一个空文件
    exists()  判断文件是否存在  存在返回true 不存在返回false
31.构造参数说明
 Writer w =new FileWriter("D:\\ytc2.txt");  参数为一个时就是文件的路径
 Writer w =new FileWriter("D:\\ytc2.txt",true); 参数为俩个时 就是是否要追加内容 append true为拼接  false不拼接  默认false
+++++++++++++++2020-6-10++++++++++32.多线程技术 
  一.1.什么是进程？
     正在进行或者执行的程序
     一个程序一旦运行都会在内存中开辟出运行的空间
     那么程序就在在其运行空间运行  进程指的是程序运行的空间
     进程的作用就是给程序开辟运行空间
   2.什么是线程？
     程序的运行空间开辟出来以后就是要执行程序。
     所谓的执行程序就是从指定的入口按照一定的顺序加载执行程序的代码内容
     程序从指定的入口按照一定的顺序加载执行程序的代码内容这称之为程序的执行顺序
     一个执行的路径就是一个线程。
     线程的作用就是执行程序
  一个进程可以有多个线程。
 3.单线程
    一个线程 程序只有一个执行路径
     一个功能执行完之后  才能去执行另一个功能  直到程序的所有功能执行完。
      线性特点
 4.多线程
   多个线程  程序有多个执行的路径
     并发（同时）特点
     每一个线程都可以执行自己的功能  而且可以同时执行

 5.总结
    多线程技术就是为了提高程序的执行效率，可以同时执行程序的多部分代码内容
    每一个线程执行的内容称之为线程任务
    一个进程至少有一个线程
6.是不是程序中的线程越多越好？并不是
二.7.CPU的运行原理
  当计算机同时执行多个程序时  cpu会将每一个程序切分成多个片段
  每一个片段就是程序的一个线程，然后cpu高速随机切换，一次执行
  一个进程的一个线程，因为这个切换的时间极其的短(1/1000)毫秒
  切换的速度非常的快，然后给我们的视觉差就是计算机同时执行多个程序
  其实并不是真的多个程序同时执行

  多线程其实也不是多个线程真的在同时执行 
  也是cpu随机高速切换一次执行一个进程的一个线程
  

  当执行的程序越多  执行的线程就越多  当达到一定的限度 那么cpu可能会因为
  线程过多而切换不过来  导致cpu终止运行（死机） 所以并不是线程越多越好

  三.最早接触的多线程
      1.主方法main方法----主线程
      2.垃圾回收器-----垃圾回收线程

 四.线程的实现方式
     第一种
       1.继承Thread类并重写run()方法
       2.run()方法中定义的是就是线程执行的任务
       3.启动线程
         不是调用线程的run()方法，调用run()方法和调用普通方法没有区别
         调用start()是启动线程  然后jvm会自动的执行线程的run()即自动执行线程任务

      线程中常用的方法
      currentThread()  获得当前执行的线程。static
      getId() 返回该线程的标识符。
      getName() 返回该线程的名称。 如果没有自己定义，线程的名字是Threa-编号
      Thread(Runnable target, String name)  指定线程名称  分配新的 Thread 对象。

    主线程出现异常了 其他三个线程会不会正常的执行？ 不影响 我们其他线程的正常执行
    其他三个线程出现异常了那么会不会影响主线程正常执行？  不会影响主线程正常执行

    第二种
     实现Runable接口并重写run()方法
       1）实行runbale接口的实现类并重写run()方法定义线程任务  而Runable接口的
       实现类对象就是线程任务对象-----将线程任务也进行了封装
       2）调用Thread类参数是Runable类型的构造器去创建Threa对象即就是创建线程
       Thread(Runnable target, String name) 
          分配新的 Thread 对象。 
       Thread(String name) 
          分配新的 Thread 对象。 
       创建了线程同时给线程指定了任务
       3）调用start()方法启动线程  jvm会自动执行线程的run()方法既线程任务
    
五.这俩种方式有什么区别？
   第一种线程封装了线程任务  线程和线程任务是一体的  耦合度过高
   第二种 是将线程和任务分离开来  线程是个对象  线程任务也是一个对象  耦合度就降低了
   有利于任务的切换和复用 给Thread对象传递的Runbale对象不同，那么线程任务就不同
   而且同一个Runable对象可以传递给不同的Thread对象

   继承只能单继承实现可以多实现。 一般用实现Runable接口多一点。

六.代码结构对比

 class Thread {
   private Runable  rb;

   public Thread(){
   }
   public Thrad(Runable rb){
     this.rb=rb;
   }

   public void run(){
     if(rb!=null){
      rb.run();
     }
   }

   public void start(){
     run();
   }
 
 }

第一种
  class Car extends Thread{
     public void run(){
     
     }
  }
Car c =new Car();
  c.start() ---->start()调用了run() 调用的是car类中重写继承自Thread类的run()方法

第二种
  class Gunable implements  Runable{
      public void run(){
      
      
      }
  }
Gunable  gr =new Gunable();
Thread t=new Thread(gr);
t.start()-------->start()调用的run方法又调用了Thread对象的持有的Runable对象的run()方法。




